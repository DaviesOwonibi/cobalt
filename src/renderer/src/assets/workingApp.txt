/* eslint-disable react/no-unknown-property */
import React, { useEffect, useRef, useState } from 'react';
import close from './assets/icons/close-w-10.png';
import restore from './assets/icons/restore-w-10.png';
import maximize from './assets/icons/max-w-10.png';
import minimize from './assets/icons/min-w-10.png';
import cobalt from './assets/icons/icon.png';

interface Tab {
  name: string;
  url: string;
  id: number;
  key: string;
}

function App(): JSX.Element {
  const [idCounter, setIdCounter] = useState(1);
  const [tabs, setTabs] = useState<Tab[]>([{ name: 'New Tab', url: '', id: 0, key: `tab-0` }]);
  const [activeTab, setActiveTab] = useState<number>(0);
  const [searchInput, setSearchInput] = useState('');
  const [homeSearchInput, setHomeSearchInput] = useState('');
  // const webviewRef = useRef<Electron.WebviewTag>(null);
  const webviewRefs = useRef<{ [key: number]: Electron.WebviewTag }>({});
  const [canGoBack, setCanGoBack] = useState(false);
  const [canGoForward, setCanGoForward] = useState(false);
  const [history, setHistory] = useState<{
    sites: string[];
    timestamps: number[];
    titles: string[];
  }>({
    sites: [],
    timestamps: [],
    titles: []
  });
  const [titles, setTitles] = useState({});

  useEffect(() => {
    const fetchTitles = async (): Promise<void> => {
      const newTitles = {};
      for (const site of history.sites) {
        try {
          const title = await getTitle(site);
          newTitles[site] = title;
        } catch (error) {
          console.error('Error fetching title for', site, error);
          newTitles[site] = 'Unable to fetch title';
        }
      }
      setTitles(newTitles);
    };

    fetchTitles();
  }, [history.sites]);

  function parseLocaleString(time: Date): string {
    const newTime = time.toDateString().replace(time.toDateString().slice(0, 4), '');
    const parts = newTime.split(' ');
    const day = parseInt(parts[1]);
    let month = parts[0];
    const thCounter = day % 31;
    let suffix: string;
    switch (thCounter) {
      case 0:
        suffix = 'st';
        break;
      case 23:
        suffix = 'rd';
        break;
      case 22:
        suffix = 'nd';
        break;
      case 21:
        suffix = 'st';
        break;
      case 3:
        suffix = 'rd';
        break;
      case 2:
        suffix = 'nd';
        break;
      case 1:
        suffix = 'st';
        break;
      default:
        suffix = 'th';
        break;
    }
    switch (month) {
      case 'Jan':
        month = 'January';
        break;
      case 'Feb':
        month = 'February';
        break;
      case 'Mar':
        month = 'March';
        break;
      case 'Apr':
        month = 'April';
        break;
      case 'May':
        break;
      case 'Jun':
        month = 'June';
        break;
      case 'Jul':
        month = 'July';
        break;
      case 'Aug':
        month = 'August';
        break;
      case 'Sep':
        month = 'September';
        break;
      case 'Oct':
        month = 'October';
        break;
      case 'Nov':
        month = 'November';
        break;
      case 'Dec':
        month = 'December';
        break;

      default:
        break;
    }
    const newDay = day + suffix;
    parts[0] = newDay;
    parts[1] = month;
    let finalDate: string = '';
    parts.forEach((part) => {
      finalDate += part + ' ';
    });
    return finalDate;
  }

  const getTitle = async (url: string): Promise<string> => {
    try {
      const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);

      if (!response.ok) {
        throw new Error('Network response was not ok.');
      }

      const data = await response.json();

      const html = data.contents;
      const doc = new DOMParser().parseFromString(html, 'text/html');
      const titleElement = doc.querySelector('title');
      let content = 'No title found';
      if (titleElement && titleElement.textContent) {
        content = titleElement.textContent;
      }

      return content;
    } catch (err) {
      console.error('Error getting title:', err);
      throw err;
    }
  };

  const fetchHistory = async (): Promise<void> => {
    const result = await window.electron?.ipcRenderer.invoke('GET_HISTORY');
    if (result) {
      setHistory(result);
    }
  };
  function addToHistory(site: string, title: string): void {
    window.electron?.ipcRenderer.send('UPDATE_HISTORY', {
      site: site,
      timestamp: Date.now(),
      title: title
    });
  }

  const clearHistory = async (): Promise<void> => {
    try {
      await window.electron.ipcRenderer.invoke('CLEAR_HISTORY');

      // Clear local state
      setHistory({
        sites: [],
        timestamps: [],
        titles: []
      });
    } catch (error) {
      console.error('Error clearing history:', error);
    }
  };

  function openCobaltPage(name: string, url: string): void {
    const cobaltTab = {
      name: name,
      url: url,
      id: idCounter,
      key: `tab-${idCounter}`
    };
    setTabs([...tabs, cobaltTab]);
    setIdCounter(idCounter + 1);
    setActiveTab(cobaltTab.id);
    setSearchInput(url);
    showSettings();
  }

  function addTab(): void {
    const newTab = { name: 'New Tab', url: '', id: idCounter, key: `tab-${idCounter}` };
    setTabs([...tabs, newTab]);
    setIdCounter(idCounter + 1);
    setActiveTab(newTab.id);
    setSearchInput('');
  }

  function settingsMenuAddTab(): void {
    const newTab = { name: 'New Tab', url: '', id: idCounter, key: `tab-${idCounter}` };
    setTabs([...tabs, newTab]);
    setIdCounter(idCounter + 1);
    setActiveTab(newTab.id);
    setSearchInput('');
    showSettings();
  }

  function webviewValid(tab: Tab): boolean {
    const cobaltPattern = /^cobalt:\/\/[a-z]/;
    return activeTab === tab.id && tab.url !== '' && !cobaltPattern.test(tab.url);
  }

  function closeTab(id: number): void {
    setTabs((prevTabs) => {
      const newTabs = prevTabs.filter((tab) => tab.id !== id);

      if (newTabs.length === 0) {
        // Close the window if it's the last tab
        window.electron?.ipcRenderer.send('TITLE_BAR_ACTION', 'CLOSE_APP');
        return prevTabs; // Return the previous state as we're closing the window
      }

      // If the closed tab was the active one, set a new active tab
      if (activeTab === id) {
        setActiveTab(newTabs[newTabs.length - 1].id);
      } else {
        setActiveTab(newTabs[getTabIndexFromId(id)].id);
      }

      return newTabs;
    });
  }

  function getTabIndexFromId(id: number): number {
    return tabs.findIndex((tab) => tab.id === id);
  }

  function setActivePage(id: number): void {
    setTabs((prevTabs) => {
      const tab = prevTabs.find((t) => t.id === id);
      if (tab) {
        setSearchInput(tab.url);
        setActiveTab(id);
      }
      return prevTabs;
    });
  }

  const activeTabIndex = tabs.findIndex((tab) => tab.id === activeTab);

  function handleSearchChange(event: React.ChangeEvent<HTMLInputElement>): void {
    setSearchInput(event.target.value);
  }

  function handleHomeSearchChange(event: React.ChangeEvent<HTMLInputElement>): void {
    setHomeSearchInput(event.target.value);
  }

  async function handleSearchSubmit(event: React.FormEvent<HTMLFormElement>): Promise<void> {
    event.preventDefault();
    if (searchInput) {
      const httpsPattern = /\b(?:https?:\/\/|www\.)[^\s/$.?#].[^\s]*\b/;
      const tldPattern =
        /(https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z0-9]{2,}(\.[a-zA-Z0-9]{2,})(\.[a-zA-Z0-9]{2,})?/;
      const localhostPattern = /^localhost:\d+$/;
      const cobaltPattern = /^cobalt:\/\/[a-z]/;
      const googleSearchPattern = /^(?!https?:\/\/|www\.).+\s?.*$/;
      let newUrl: string = '';
      if (httpsPattern.test(searchInput)) {
        newUrl = searchInput;
      } else if (tldPattern.test(searchInput)) {
        newUrl = `https://${searchInput}`;
      } else if (localhostPattern.test(searchInput)) {
        newUrl = `http://${searchInput}`;
      } else if (cobaltPattern.test(searchInput)) {
        newUrl = searchInput;
        const lowercaseName = newUrl.split('//')[1];
        const firstLetter = lowercaseName.slice(0, 1);
        const rest = lowercaseName.slice(1, lowercaseName.length);
        const newName = firstLetter.toUpperCase() + rest;
        const updatedTabs = tabs.map((tab) =>
          tab.id === activeTab ? { ...tab, url: newUrl, name: newName } : tab
        );
        setTabs(updatedTabs);
        return;
      } else if (googleSearchPattern.test(searchInput)) {
        newUrl = `https://www.google.com/search?q=${encodeURIComponent(searchInput)}`;
      }
      const updatedTabs = tabs.map((tab) => (tab.id === activeTab ? { ...tab, url: newUrl } : tab));
      setTabs(updatedTabs);
      const webview = webviewRefs.current[activeTab];
      if (webview) {
        webview.loadURL(newUrl);
        const title = await getTitle(newUrl);
        addToHistory(newUrl, title);
      }
    }
  }

  async function handleHomeSearchSubmit(event: React.FormEvent<HTMLFormElement>): Promise<void> {
    event.preventDefault();
    if (homeSearchInput) {
      const newUrl: string = `https://www.google.com/search?q=${encodeURIComponent(homeSearchInput)}`;
      const updatedTabs = tabs.map((tab) => (tab.id === activeTab ? { ...tab, url: newUrl } : tab));
      setTabs(updatedTabs);
      tabs[activeTabIndex].url = newUrl;
      setSearchInput(tabs[activeTabIndex].url);
      const title = await getTitle(newUrl);
      addToHistory(newUrl, title);
    }
  }

  const handleGoBack = (): void => {
    const webview = webviewRefs.current[activeTab];
    if (webview && canGoBack) {
      webview.goBack();
    }
  };

  const handleGoForward = (): void => {
    const webview = webviewRefs.current[activeTab];
    if (webview && canGoForward) {
      webview.goForward();
    }
  };

  const handleReload = (): void => {
    const webview = webviewRefs.current[activeTab];
    if (webview) {
      webview.reload();
    }
  };

  useEffect(() => {
    const ipcRenderer = window.electron?.ipcRenderer;

    const handleWindowControls = (): void => {
      if (!ipcRenderer) return;

      const actions = [
        { id: 'min-button', action: 'MINIMIZE_WINDOW' },
        { id: 'max-button', action: 'MAXIMIZE_WINDOW' },
        { id: 'restore-button', action: 'RESTORE_WINDOW' },
        { id: 'close-button', action: 'CLOSE_APP' }
      ];

      actions.forEach(({ id, action }) => {
        const element = document.getElementById(id);
        if (element) {
          element.addEventListener('click', () => {
            ipcRenderer.send('TITLE_BAR_ACTION', action);
            return;
          });
        }
      });

      ipcRenderer.removeAllListeners('unmaximized');
      ipcRenderer.removeAllListeners('maximized');

      ipcRenderer.on('unmaximized', () => {
        document.getElementById('restore-button')?.classList.add('hidden');
        document.getElementById('max-button')?.classList.remove('hidden');
      });

      ipcRenderer.on('maximized', () => {
        document.getElementById('restore-button')?.classList.remove('hidden');
        document.getElementById('max-button')?.classList.add('hidden');
      });
    };

    if (document.readyState === 'complete') {
      handleWindowControls();
    } else {
      document.addEventListener('readystatechange', () => {
        if (document.readyState === 'complete') {
          handleWindowControls();
        }
      });
    }

    return (): void => {
      const actions = ['min-button', 'max-button', 'restore-button', 'close-button'];
      actions.forEach((id) => {
        const element = document.getElementById(id);
        if (element) {
          element.removeEventListener('click', () => {});
        }
      });

      ipcRenderer?.removeAllListeners('unmaximized');
      ipcRenderer?.removeAllListeners('maximized');
    };
  }, []);

  useEffect(() => {
    tabs.forEach((tab) => {
      const webview = webviewRefs.current[tab.id];
      if (webview) {
        webview.addEventListener('dom-ready', () => {
          webview.insertCSS(`
          ::-webkit-scrollbar {
            width: 15px;
            height: 10px;
          }
          ::-webkit-scrollbar-track {
            background-color: rgb(32, 40, 48);
          }
          ::-webkit-scrollbar-track-piece {
            background-color: rgb(18, 22, 26);
          }
          ::-webkit-scrollbar-thumb {
            height: 25%;
            width: 5px;
            background-color: rgb(32, 40, 48);
            background-color: #cdd6f4;
            border: 1px rgb(18, 22, 26) solid;
          }
          ::-webkit-scrollbar-thumb:hover {
            opacity: 0.2;
            background-color: #b4befe;
          }

          ::-webkit-scrollbar-corner {
            background-color: rgb(32, 40, 48);
          }
        `);
        });

        const handleNavigate = (): void => {
          const title = webview.getTitle();
          const url = webview.getURL();

          setTabs((prevTabs) => {
            return prevTabs.map((t) => (t.id === tab.id ? { ...t, name: title, url: url } : t));
          });

          if (tab.id === activeTab) {
            setCanGoBack(webview.canGoBack());
            setCanGoForward(webview.canGoForward());
            setSearchInput(url);
            addToHistory(url, title);
          }
        };

        const updateTabInfo = (): void => {
          const title = webview.getTitle();
          const url = webview.getURL();

          setTabs((prevTabs) => {
            return prevTabs.map((t) => (t.id === tab.id ? { ...t, name: title, url: url } : t));
          });

          if (tab.id === activeTab) {
            setCanGoBack(webview.canGoBack());
            setCanGoForward(webview.canGoForward());
            setSearchInput(url);
          }
        };

        webview.addEventListener('did-finish-load', updateTabInfo);
        webview.addEventListener('did-navigate', handleNavigate);
        webview.addEventListener('page-title-updated', updateTabInfo);
      }
    });

    return (): void => {
      tabs.forEach((tab) => {
        const webview = webviewRefs.current[tab.id];
        if (webview) {
          webview.removeEventListener('did-finish-load', () => {});
          webview.removeEventListener('did-navigate', () => {});
          webview.removeEventListener('page-title-updated', () => {});
        }
      });
    };
  }, [activeTab]);

  useEffect(() => {
    if (tabs[activeTabIndex]?.url === 'cobalt://history') {
      fetchHistory();
    }
  }, [activeTabIndex, tabs]);

  const showSettings = (): void => {
    const settingsMenu = document.getElementById('settings-menu');
    if (settingsMenu) {
      settingsMenu.classList.toggle('show');
    }
  };

  return (
    <div>
      <div className="frame">
        <div id="drag-region">
          <div className="tabs" draggable={false}>
            {tabs.map((tab) => (
              <div
                key={tab.id}
                onClick={() => setActivePage(tab.id)}
                className={`tab ${activeTab === tab.id ? 'active' : ''}`}
                draggable={false}
              >
                <span className="tabName">{tab.name}</span>
                <button onClick={() => closeTab(tab.id)} className="close-tab">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512">
                    <path
                      fill="#cdd6f4"
                      d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"
                    />
                  </svg>
                </button>
              </div>
            ))}
          </div>
          <button onClick={addTab} className="newTabBtn">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <path
                fill="#cdd6f4"
                d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 144L48 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l144 0 0 144c0 17.7 14.3 32 32 32s32-14.3 32-32l0-144 144 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-144 0 0-144z"
              />
            </svg>
          </button>
          <div id="window-controls">
            <div className="button window-hover" id="min-button">
              <img className="icon" id="min" alt="minimize" srcSet={minimize} draggable="false" />
            </div>
            <div className="button window-hover" id="max-button">
              <img className="icon" id="max" alt="maximize" srcSet={maximize} draggable="false" />
            </div>
            <div className="button window-hover hidden" id="restore-button">
              <img className="icon" id="restore" alt="restore" srcSet={restore} draggable="false" />
            </div>
            <div className="button window-hover-close" id="close-button">
              <img className="icon" id="close" alt="close" srcSet={close} draggable="false" />
            </div>
          </div>
        </div>
      </div>

      <div className="searchBarSection">
        <div className="pageBtns">
          <button className="pageBtn" onClick={handleGoBack} disabled={!canGoBack}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
            </svg>
          </button>
          <button className="pageBtn" onClick={handleGoForward} disabled={!canGoForward}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" />
            </svg>
          </button>
          <button className="pageBtn" onClick={handleReload}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <path d="M386.3 160L336 160c-17.7 0-32 14.3-32 32s14.3 32 32 32l128 0c17.7 0 32-14.3 32-32l0-128c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 51.2L414.4 97.6c-87.5-87.5-229.3-87.5-316.8 0s-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3s163.8-62.5 226.3 0L386.3 160z" />
            </svg>
          </button>
        </div>
        <form onSubmit={handleSearchSubmit} className="searchForm">
          <label htmlFor="search-input">
            <span className="searchIcon">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                <path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
              </svg>
            </span>
            <input
              id="search-input"
              type="text"
              value={searchInput}
              onChange={handleSearchChange}
              aria-placeholder="Search Google or enter address"
              placeholder="Search Google or enter address"
            />
          </label>
        </form>
        <div className="pageBtns">
          <button className="pageBtn">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path d="M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 242.7-73.4-73.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l128-128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L288 274.7 288 32zM64 352c-35.3 0-64 28.7-64 64l0 32c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-32c0-35.3-28.7-64-64-64l-101.5 0-45.3 45.3c-25 25-65.5 25-90.5 0L165.5 352 64 352zm368 56a24 24 0 1 1 0 48 24 24 0 1 1 0-48z" />
            </svg>
          </button>
          <button className="pageBtn" id="settingsBtn" onClick={showSettings}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <path d="M0 96C0 78.3 14.3 64 32 64l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 128C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32l384 0c17.7 0 32 14.3 32 32s-14.3 32-32 32L32 288c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32L32 448c-17.7 0-32-14.3-32-32s14.3-32 32-32l384 0c17.7 0 32-14.3 32 32z" />
            </svg>
          </button>
        </div>
        <div id="settings-menu">
          <button onClick={settingsMenuAddTab}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
              <path
                fill="#cdd6f4"
                d="M64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32zM200 344l0-64-64 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l64 0 0-64c0-13.3 10.7-24 24-24s24 10.7 24 24l0 64 64 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-64 0 0 64c0 13.3-10.7 24-24 24s-24-10.7-24-24z"
              />
            </svg>
            New Tab
          </button>
          <button
            onClick={() => {
              openCobaltPage('Downloads', 'cobalt://downloads');
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path
                fill="#cdd6f4"
                d="M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 242.7-73.4-73.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l128-128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L288 274.7 288 32zM64 352c-35.3 0-64 28.7-64 64l0 32c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64l0-32c0-35.3-28.7-64-64-64l-101.5 0-45.3 45.3c-25 25-65.5 25-90.5 0L165.5 352 64 352zm368 56a24 24 0 1 1 0 48 24 24 0 1 1 0-48z"
              />
            </svg>
            Downloads
          </button>
          <button
            onClick={() => {
              openCobaltPage('History', 'cobalt://history');
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
              <path
                fill="#cdd6f4"
                d="M48 106.7L48 56c0-13.3-10.7-24-24-24S0 42.7 0 56L0 168c0 13.3 10.7 24 24 24l112 0c13.3 0 24-10.7 24-24s-10.7-24-24-24l-55.3 0c37-57.8 101.7-96 175.3-96c114.9 0 208 93.1 208 208s-93.1 208-208 208c-42.5 0-81.9-12.7-114.7-34.5c-11-7.3-25.9-4.3-33.3 6.7s-4.3 25.9 6.7 33.3C155.2 496.4 203.8 512 256 512c141.4 0 256-114.6 256-256S397.4 0 256 0C170.3 0 94.4 42.1 48 106.7zM256 128c-13.3 0-24 10.7-24 24l0 104c0 6.4 2.5 12.5 7 17l72 72c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-65-65 0-94.1c0-13.3-10.7-24-24-24z"
              />
            </svg>
            History
          </button>
        </div>
      </div>

      <div className="page" style={{ width: '100%', height: '100vh' }}>
        {tabs.map((tab) => (
          <webview
            key={tab.key}
            ref={(el) => {
              if (el && !webviewRefs.current[tab.id]) {
                webviewRefs.current[tab.id] = el;
              }
            }}
            src={webviewValid(tab) ? tab.url : ''}
            style={{
              width: '100vw',
              height: 'calc(100vh - 110px)',
              border: 'none',
              overflowWrap: 'break-word',
              display: webviewValid(tab) ? 'flex' : 'none'
            }}
            nodeintegration
            webpreferences="allowRunningInsecureContent, javascript=yes"
          />
        ))}
        {tabs[activeTabIndex]?.url === 'cobalt://history' && (
          <div className="history-page">
            <h1>History</h1>
            <ul className="history-list">
              {history.sites.map((site, index) => (
                <li key={index} className="history-item">
                  <h1>{titles[site]}</h1>
                  <a
                    href={site}
                    onClick={(e) => {
                      e.preventDefault();
                      const updatedTabs = tabs.map((tab) =>
                        tab.id === activeTab ? { ...tab, url: site } : tab
                      );
                      setTabs(updatedTabs);
                    }}
                  >
                    {site}
                  </a>
                  <span className="history-timestamp">
                    {parseLocaleString(new Date(history.timestamps[index]))}
                  </span>
                </li>
              ))}
            </ul>
            <button onClick={clearHistory} className="clear-history">
              Clear History
            </button>
          </div>
        )}
        {tabs[activeTabIndex]?.url === 'cobalt://downloads' && (
          <div className="downloads-page">
            <h1>Downloads</h1>
            <ul className="history-list">
              {history.sites.map((site, index) => (
                <li key={index} className="history-item">
                  <h1>{titles[site]}</h1>
                  <a
                    href={site}
                    onClick={(e) => {
                      e.preventDefault();
                      const updatedTabs = tabs.map((tab) =>
                        tab.id === activeTab ? { ...tab, url: site } : tab
                      );
                      setTabs(updatedTabs);
                    }}
                  >
                    {site}
                  </a>
                  <span className="history-timestamp">
                    {new Date(history.timestamps[index]).toLocaleString()}
                  </span>
                </li>
              ))}
            </ul>
            <button onClick={clearHistory} className="clear-history">
              Clear Download History
            </button>
          </div>
        )}
        {activeTabIndex !== -1 && !tabs[activeTabIndex].url && (
          <div
            className="newTabPage"
            style={{ display: activeTab === tabs[activeTabIndex].id ? 'block' : 'none' }}
          >
            <div className="app">
              <h1 className="title">
                <span className="cobalt-span">
                  <img src={cobalt} alt="Cobalt Logo" className="cobalt-logo" />
                </span>
                Cobalt
              </h1>
              <form className="new-page-search-form" onSubmit={handleHomeSearchSubmit}>
                <label className="search-bar" htmlFor="">
                  <span className="google-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 488 512">
                      <path
                        fill="#f0f2ff"
                        d="M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z"
                      />
                    </svg>
                  </span>
                  <input
                    type="text"
                    value={homeSearchInput}
                    onChange={handleHomeSearchChange}
                    aria-placeholder="Search with Google"
                    placeholder="Search with Google"
                  />
                </label>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;

ymlj7610

Master codes
D8BAE4D9 4864DCE5
A86CDBA5 19BA49B3

Infinite Rare Candies
BFF956FA
2F9EC50D

Infinite Money
D8BAE4D9

4864DCE5

A86CDBA5

19BA49B3

A57E2EDE

A5AFF3E4

1C7B3231

B494738C

C051CCF6

975E8DA1